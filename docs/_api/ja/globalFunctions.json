{
    "render": {
        "comment": {
            "text": [
                "コンテナを新しい値で更新するには、テンプレートリテラルを再評価し、新しい結果で `render`を呼び出します。"
            ],
            "shortText": "テンプレートをコンテナにレンダリングします。"
        }
    },
    "prepareTemplateStyles": {
        "comment": {
            "text": [
                "`<style>`要素は初期レンダリングの時のみ置くことができます。",
                "`<style>`要素をテンプレートに含めて動的にレンダリングした場合（最初のスコープレンダリング時）、それらはスコープに入らず、`<style>`はテンプレートに残ったままで、出力だけされます。"
            ],
            "shortText": [
                "指定されたスコープ名に対して、ShadyCSSスタイルスコープは確実に実行されます。これは、スコープ名ごとに1回だけ実行されるため、フラグメントとテンプレートは変更されません。",
                "(1) レンダリングされたフラグメントからスタイルを抽出し、ShadyCSSに渡してスコープを設定し、ドキュメントに追加します",
                "(2) このスコープ名のすべてのlit-htmlテンプレートからスタイル要素を削除します"
            ]
        }
    },
    "removeStylesFromLitTemplates": {
        "comment": {
            "shortText": "指定されたscopeNameのTemplatesからすべてのスタイル要素を削除します。"
        }
    },
    "shadyTemplateFactory": {
        "comment": {
            "shortText": "ShadyCSSを使用してテンプレートDOMをスコープするテンプレートファクトリ。"
        }
    },
    "insertNodeIntoTemplate": {
        "comment": {
            "shortText": [
                "指定されたノードをテンプレートに挿入します。オプションで指定したrefNodeの前に挿入します。 テンプレートにノードを挿入するだけでなく、テンプレート・パーツのインデックスは、変更されたテンプレートDOMに一致するように更新されます。"
            ]
        }
    },
    "removeNodesFromTemplate": {
        "comment": {
            "text": [
                "テンプレートは削除状態に追従し、必要に応じて部分インデックスが調整されます。",
                "div",
                "  div#1 (削除) <-- 削除開始 (div#1のノードが削除される)",
                "    div",
                "      div#2 (削除)  <-- 続いて削除される (削除しているのはdiv#1ノード)",
                "        div",
                "div <-- 直前の兄弟ノードなので、削除をストップする (div#1によって4ノードが削除された)"
            ],
            "shortText": [
                "テンプレートから安全にノードリストを削除します。テンプレートからノードを削除するだけでなく、テンプレート・パーツのインデックスは、変更されたテンプレートDOMに一致するように更新されます。"
            ]
        }
    },
    "svg": {
        "comment": {
            "shortText": [
                "テンプレートリテラルをSVGテンプレートとして解釈し、コンテナへ効率的にレンダリングおよび更新します。"
            ]
        }
    },
    "html": {
        "comment": {
            "shortText": [
                "テンプレートリテラルをHTMLテンプレートとして解釈し、コンテナへ効率的にレンダリングおよび更新します。"
            ]
        }
    },
    "templateFactory": {
        "comment": {
            "shortText": [
                "テンプレートをキャッシュするデフォルトのTemplateFactoryは、result.typeとresult.stringsをキーとします。"
            ]
        }
    },
    "removeNodes": {
        "comment": {
            "shortText": [
                "`startNode`(包含)から`endNode`(排他)まで、 `container`からノードを削除します。"
            ]
        }
    },
    "reparentNodes": {
        "comment": {
            "shortText": [
                "親要素を切り替える為に、`beforeNode`の前へ`startNode`(包含)から`endNode`(排他)までを、別のコンテナ(同じコンテナでも)に挿入します。`beforeNode`がnullの場合、ノードをコンテナに追加します。"
            ]
        }
    },
    "directive": {
        "comment": {
            "shortText": [
                "ディレクティブとしてlit-htmlがテンプレートを描画するのに(値ではなく)関数として呼び出せるように定義します"
            ]
        }
    },
    "lit-html": {
        "comment": {
            "text": [
                "コンテナを新しい値で更新するには、テンプレートリテラルを再評価し、新しい結果で `render`を呼び出します。"
            ],
            "shortText": "テンプレートをコンテナにレンダリングします。"
        }
    }
}
