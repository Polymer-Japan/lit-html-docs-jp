--- node_modules/typedoc-plugin-localization/dist/components/render-component.orig.js	1985-10-26 17:15:00.000000000 +0900
+++ node_modules/typedoc-plugin-localization/dist/components/render-component.js	2018-12-20 16:10:41.981209666 +0900
@@ -42,6 +42,19 @@
     }
     processTheReflection(reflection) {
         switch (reflection.kind) {
+            case models_1.ReflectionKind.Variable:
+            case models_1.ReflectionKind.TypeAlias:
+            case models_1.ReflectionKind.ExternalModule:
+                if (!this.globalFuncsData) {
+                    break;
+                }
+                const emName = reflection.name;
+                const emData = this.globalFuncsData[emName];
+                if (!emData || !reflection.comment || !emData[constants_1.Constants.COMMENT]) {
+                    break;
+                }
+                this.updateComment(reflection, emData);
+                break;
             case models_1.ReflectionKind.Class:
             case models_1.ReflectionKind.Enum:
             case models_1.ReflectionKind.Interface:
@@ -137,10 +150,14 @@
         if (reflection.parameters && dataObj[constants_1.Constants.COMMENT][constants_1.Constants.PARAMS]) {
             reflection.parameters.forEach(param => {
                 const paramFromJson = dataObj[constants_1.Constants.COMMENT][constants_1.Constants.PARAMS][param.name];
-                if (paramFromJson) {
+                if (paramFromJson && param.comment && paramFromJson[constants_1.Constants.COMMENT].text) {
                     param.comment.text = this.parser.joinByCharacter(paramFromJson[constants_1.Constants.COMMENT].text, '\n');
                     return param;
                 }
+                if (paramFromJson && param.comment && paramFromJson[constants_1.Constants.COMMENT].shortText) {
+                    param.comment.shortText = this.parser.joinByCharacter(paramFromJson[constants_1.Constants.COMMENT].shortText, '\n');
+                    return param;
+                }
             });
         }
     }
